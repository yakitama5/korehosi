name: Flutter Test
on:
  pull_request:
    types:
      - opened
      - synchronize
  push:
    branches:
      - main
# jobs:
#   flutter_test:
#     # if: ${{ false }}
#     name: Test
#     # GoldenTestを考慮してWindowsを利用
#     # runs-on: ubuntu-latest
#     runs-on: windows-latest
#     timeout-minutes: 30
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v3
#       - name: Create dart-define
#         shell: powershell
#         run: |
#           mkdir dart_defines
#           [System.Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('${{ secrets.DART_DEFINE_JSON }}')) > dart_defines/prod.json
#         # mkdir -p dart_defines
#         # echo -n ${{ secrets.DART_DEFINE_JSON }} | base64 -d > dart_defines/prod.json
#       - name: Create Firebase Conf
#         run: |
#           [System.Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('${{ secrets.FIREBASE_OPTIONS }}')) > lib/firebase_options.dart
#           [System.Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('${{ secrets.FIREBASE_OPTIONS_DEV }}')) > lib/firebase_options_dev.dart
#           [System.Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('${{ secrets.GOOGLE_SERVICES_JSON }}')) > android/app/src/prod/google-services.json
#           mkdir ios/prod/
#           [System.Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('${{ secrets.GOOGLE_INFO_PLIST }}')) > ios/prod/GoogleService-Info.plist
#         # echo -n ${{ secrets.FIREBASE_OPTIONS }} | base64 -d > lib/firebase_options.dart
#         # echo -n ${{ secrets.FIREBASE_OPTIONS_DEV }} | base64 -d > lib/firebase_options_dev.dart
#         # mkdir -p android/app/src/prod/
#         # echo -n ${{ secrets.GOOGLE_SERVICES_JSON }} | base64 -d > android/app/src/prod/google-services.json
#         # mkdir -p ios/prod/
#         # echo -n ${{ secrets.GOOGLE_INFO_PLIST }} | base64 -d > ios/prod/GoogleService-Info.plist
#       - name: Create env
#         run: |
#           mkdir scripts
#           mkdir scripts/env
#           [System.Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('${{ secrets.ENV_FILE }}')) > scripts/env/.env
#           [System.Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('${{ secrets.DEV_ENV_FILE }}')) > scripts/env/.env.dev
#         # mkdir -p scripts
#         # mkdir -p scripts/env
#         # echo -n  | base64 -d > 
#         # echo -n  | base64 -d > 
#       - name: Setup Flutter SDK
#         uses: subosito/flutter-action@v2
#         with:
#           flutter-version: ${{ vars.FLUTTER_VERSION }}
#           channel: ${{ vars.FLUTTER_CHANNEL }}
#           cache: true
      
#       # テスト実行
#       - run: flutter pub get
#       - run: flutter pub run build_runner build --delete-conflicting-outputs
#       - run: flutter test --dart-define=CI=true
jobs:
  flutter_test:
    # if: ${{ false }}
    name: Test
    # runs-on: ubuntu-latest
    runs-on: windows-latest
    timeout-minutes: 30
    steps:
      # チェックアウト
      - name: Checkout
        uses: actions/checkout@v4

      # セットアップ
      - name: Setup Config Files
        uses: ./.github/actions/setup-config-files
        env: # Set the secret as an input
          DART_DEFINE_JSON: ${{ secrets.DART_DEFINE_JSON }}
          FIREBASE_OPTIONS: ${{ secrets.FIREBASE_OPTIONS }}
          FIREBASE_OPTIONS_DEV: ${{ secrets.FIREBASE_OPTIONS_DEV }}
          GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}
          GOOGLE_INFO_PLIST: ${{ secrets.GOOGLE_INFO_PLIST }}
          ENV_FILE: ${{ secrets.ENV_FILE }}
          DEV_ENV_FILE: ${{ secrets.DEV_ENV_FILE }}
      - name: Setup Application Runtime
        uses: ./.github/actions/setup-application-runtime

      # 実行
      - run: melos exec -- flutter test --dart-define=CI=true
